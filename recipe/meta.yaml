{% set version = "1.2.0" %}
{% set build = 6 %}

{% set build = build + 100 %}   # [not TTK_WITH_PARAVIEW]

package:
  name: topologytoolkit
  version: {{ version }}

source:
  url: https://github.com/topology-tool-kit/ttk/archive/{{ version }}.zip
  sha256: c1b5e2bc592845fd61460d635429d2fb117c3a5a4e8236b4f7736ea9e2196d9b
  patches:
    - patches/0001-remove-too-restrictive-linker-flags.patch
    - patches/0002-fix-ninja-build.patch                                # [win]
    - patches/0003-remove-ttk-subdir-from-install-destinations.patch
    - patches/0004-Linux-remove-rpaths.patch                            # [linux]
    - patches/0005-Remove-DIY-dependency.patch

build:
  number: {{ build }}
  skip: true  # [TTK_WITH_PARAVIEW and osx]

  # the package variant can be selected via the build string:
  # `conda install -c conda-forge "topologytoolkit * no_paraview*"` for vtk-variant
  # `conda install -c conda-forge "topologytoolkit * with_paraview*"` for paraview-variant (default)
  {% if TTK_WITH_PARAVIEW == "True" %}
  {% set paraview_prefix = "with_paraview" %}
  {% else %}
  {% set paraview_prefix = "no_paraview" %}
  {% endif %}
  string: {{ paraview_prefix }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build }}

  # this de-prioritizes the non-paraview variant of the package and makes paraview the default
  track_features:
    - ttk_without_paraview  # [not TTK_WITH_PARAVIEW]

  ignore_run_exports_from:
    - expat
    - exprtk
    - fmt
    - icu
    - libharu
    - proj
    - tbb-devel

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ cdt('libxcb') }}  # [linux]
    - {{ cdt('libxau') }}  # [linux]
    - {{ cdt('libuuid') }}  # [linux]
    - {{ cdt('libxext') }}  # [linux]
    - {{ cdt('libxfixes') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libsm-devel') }}  # [linux]
    - {{ cdt('libice-devel') }}  # [linux]
    - {{ cdt('libx11-devel') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('xorg-x11-proto-devel') }}  # [linux]
    - {{ cdt('libxrender-devel') }}      # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('mesa-libegl-devel') }}     # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('alsa-lib-devel') }}        # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('gtk2-devel') }}            # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('gtkmm24-devel') }}         # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libdrm-devel') }}          # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxcomposite-devel') }}   # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxcursor-devel') }}      # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxi-devel') }}           # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxrandr-devel') }}       # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('pciutils-devel') }}        # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxscrnsaver-devel') }}   # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxtst-devel') }}         # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxdamage-devel') }}      # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxfixes-devel') }}       # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxrandr') }}             # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('alsa-lib') }}              # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('xorg-x11-server-xvfb') }}  # [linux and TTK_WITH_PARAVIEW]
    - {{ cdt('libxt-devel') }}           # [linux and TTK_WITH_PARAVIEW]
    - cmake
    - make      # [unix]
    - ninja     # [win]
    - clangdev  # [win]
    - perl      # [win]
  host:
    - python
    - eigen
    - graphviz  # [unix]
    - icu
    - libboost-headers
    - numpy
    - libgomp        # [linux]
    - llvm-openmp    # [osx or win]
    - spectralib
    - sqlite
    - tbb-devel
    - zfp
    - zlib
    - cli11             # [TTK_WITH_PARAVIEW]
    - expat             # [TTK_WITH_PARAVIEW]
    - exprtk            # [TTK_WITH_PARAVIEW]
    - fmt               # [TTK_WITH_PARAVIEW]
    - libharu           # [TTK_WITH_PARAVIEW]
    - nlohmann_json     # [TTK_WITH_PARAVIEW]
    - paraview * *_qt   # [TTK_WITH_PARAVIEW]
    - proj              # [TTK_WITH_PARAVIEW]
    - vtk               # [not TTK_WITH_PARAVIEW]
  run:
    - python
    - paraview * *_qt   # [TTK_WITH_PARAVIEW]

test:
  imports:
    - topologytoolkit
  source_files:
    - examples/data/inputData.vtu
    - examples/python/example.py
    - examples/pvpython/example.py  # [TTK_WITH_PARAVIEW]
  commands:
    - ldd "${PREFIX}/bin/ttkMorseSmaleComplexCmd"  # [linux]
    - readelf -d "${PREFIX}/bin/ttkMorseSmaleComplexCmd"  # [linux]
    - python examples/python/example.py examples/data/inputData.vtu
    - ttkMorseSmaleComplexCmd -i examples/data/inputData.vtu -o ""
    - python examples/pvpython/example.py examples/data/inputData.vtu  # [TTK_WITH_PARAVIEW]
    #- pvpython examples/pvpython/example.py examples/data/inputData.vtu  # [TTK_WITH_PARAVIEW]

about:
  home: https://topology-tool-kit.github.io/
  dev_url: https://github.com/topology-tool-kit/ttk
  license: BSD custom 5-clause variant
  license_family: BSD
  license_file: LICENSE
  summary: >
    The Topology ToolKit (TTK) is an open-source library and software
    collection for topological data analysis and visualization. 
  description: |
    TTK can handle scalar data defined either on regular grids or
    triangulations, in 2D, 3D, or more. It provides a substantial collection
    of generic, efficient and robust implementations of key algorithms in
    topological data analysis. It includes:
    · For scalar data: critical points, integral lines, persistence diagrams,
      persistence curves, merge trees, contour trees, Reeb graphs, Morse-Smale
      complexes, topological simplification, topology-aware compression,
      harmonic design;
    · For bivariate scalar data: fibers, fiber surfaces, continuous
      scatterplots, Jacobi sets, Reeb spaces;
    · For uncertain scalar data: mandatory critical points;
    · For time-varying scalar data: critical point tracking, nested tracking
      graphs;
    · For high-dimensional / point cloud data: dimension reduction,
      persistence-based clustering;
    · and more!

extra:
  recipe-maintainers:
    - lhofmann
    - julien-tierny
